import React, { useRef, useState, ReactElement } from 'react';
import { useRipple } from '../hooks/useRipple';

export type ButtonProps = {
  children?: React.ReactNode;
  className?: string;
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  onClick?: React.MouseEventHandler<HTMLElement>;
};
// <Button variant="outlined" startIcon={<DeleteIcon />}>
export const Button: React.FC<ButtonProps> = (props): ReactElement => {
  const {
    children,
    className,
    startIcon: startIconProp,
    endIcon: endIconProp,
    onClick
  } = props;

  const ref = useRef(null);
  useRipple(ref);

  const startIcon = startIconProp && (
    <span className="mr-1" >
      {startIconProp}
    </span>
  );
  const endIcon = endIconProp && (
    <span className="ml-1" >
      {endIconProp}
    </span>
  );

  const handleClick = (e) => {
    console.log("Button handleClick")
    onClick?.(e);
  }

  return (
    <button className="inline-flex items-center bg-gray-100 border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base mt-4 md:mt-0" ref={ref} onClick={handleClick}>
      {startIcon}
      {children}
      {endIcon}
    </button>

  )
}

Button.displayName = "Button";

Button.defaultProps = {
};
